p_grid[ which.min(loss) ]
median(samples)
compute_posterior <- function( W , L , poss=c(0,0.25,0.5,0.75,1) ) {
ways <- sapply( poss , function(q) q^W * (1-q)^L )
post <- ways/sum(ways)
data.frame( poss , ways , post=round(post,3) )
}
compute_posterior( 4 , 11 , poss=seq(from=0,to=1,len=11) )
sample <- c("W","W","W","W","L","L","L","L","L","L","L","L","L","L","L")
W <- sum(sample=="W")
L <- sum(sample==("L")
L <- sum(sample=="L")
L <- sum(sample=="L")
compute_posterior <- function( sample , poss=c(0,0.25,0.5,0.75,1) ) { ways <- sapply( poss , function(q) makebar(q) ) post <- ways/sum(ways) bars <- sapply( post, functio(q) make_bar(q)) data.frame( poss , ways, post=round(post,3) , bars)}
compute_posterior <- function( sample , poss=c(0,0.25,0.5,0.75,1) ) {
ways <- sapply( poss , function(q) makebar(q) )
post <- ways/sum(ways)
bars <- sapply( post, function(q) make_bar(q))
data.frame( poss , ways, post=round(post,3) , bars)
}
compute_posterior( 4 , 11 , poss=seq(from=0,to=1,len=11) )
compute_posterior
compute_posterior(poss=seq(from=0, to=1,len=11))
compute_posterior <- function( sample , poss=c(0,0.25,0.5,0.75,1) ) {
ways <- sapply( poss , function(q) makebar(q) )
post <- ways/sum(ways)
data.frame( poss , ways, post=round(post,3) , bars)
}
ompute_posterior(poss=seq(from=0, to=1,len=11))
compute_posterior(poss=seq(from=0, to=1,len=11))
p_grid <- seq( from=0 , to=1 , length.out=20 )
# define prior
prior <- rep( 1 , 20 )
# compute likelihood at each value in grid
likelihood <- dbinom( 2 , size=3 , prob=p_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
plot( p_grid , posterior , type="b" ,
xlab="probability of water" , ylab="posterior probability" )
mtext( "20 points" )
p_grid <- seq( from=0 , to=1 , length.out=100 )
# define prior
prior <- rep( 1 , 100 )
# compute likelihood at each value in grid
likelihood <- dbinom( 3 , size=3 , prob=p_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
plot( p_grid , posterior , type="b" ,
+       xlab="probability of water" , ylab="posterior probability" )
plot( p_grid , posterior , type="b" ,
xlab="probability of water" , ylab="posterior probability" )
mtext( "200 points" )
p_grid <- seq( from=0 , to=1 , length.out=20 )
# define prior
prior <- rep( 1 , 20 )
# compute likelihood at each value in grid
likelihood <- dbinom( 4 , size=15 , prob=p_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
posterior
plot( p_grid , posterior , type="b" ,
+       xlab="probability of water" , ylab="posterior probability" )
plot( p_grid , posterior , type="b" ,
xlab="probability of water" , ylab="posterior probability" )
data.frame(posterior)
compute_posterior <- function( sample , poss=c(0,0.25,0.5,0.75,1) ) {
ways <- sapply( poss , function(q) makebar(q) )
post <- ways/sum(ways)
data.frame( poss , ways, post=round(post,3) , bars)
}
compute_posterior <- function( sample , poss=c(0,0.25,0.5,0.75,1) ) {
ways <- sapply( poss , function(q)  q^W * (1-q)^L  )
post <- ways/sum(ways)
data.frame( poss , ways, post=round(post,3))
}
View(compute_posterior)
View(compute_posterior)
data.frame( poss , ways, post=round(post,3)
compute_posterior( 4 , 11 , poss=seq(from=0,to=1,len=11) )
compute_posterior( 4 , 11 , poss=seq(from=0,to=1,len=11)
compute_posterior( 4 , 11 , poss=seq(from=0,to=1,len=11)
compute_posterior( 4 , 11 , poss=seq(from=0,to=1,len=11)
View(compute_posterior)
curve( dbeta(x,4+1,11+1) , from=0 , to=1 , xlab="p" )
p_samples <- rbeta(1e4,4+1,11+1)
W_sim <- rbinom(1e4,size=5,p=p_samples)
plot(table(W_sim))
p_samples
library(rethinking)
mu_prior <- rnorm(1e4, 0, 10)
sigma_prior) <- runif(1e4, 0, 100)
mu_prior <- rnorm(1e4, 0, 10)
sigma_prior <- runif(1e4, 0, 100)
h_sim <- rnorm(1e4, mu_prior, sigma_prior)
dens(h_sim)
data("Howell")
data("Howell1")
?extract.samples
H2 <- Howell1
H2$<18
data("Howell")
H3 <- [d$age < 18 , ]
H3 <- H2[ H2$age < 18 , ]
str(H3)
knitr::opts_chunk$set(echo = TRUE)
#model
hurrmodel7 <- glm(didmove ~ age + sex  + white + black + hispanic + income + schooling + fulltime + partime + selfempfull + selfemppart + laidoff + unemployed + disabled + student + own.rent + evac.state + res.damage + own.rent*res.damage, family = "binomial", data = hurricane)
knitr::opts_chunk$set(echo = TRUE)
# Load all the packages needed here
library(tidyverse)
library(readr)
library(modelsummary) #to make nice tables and dataskim
library(here) #for file path simplicity
library(broom.mixed)
library(effectsize)
library(corrplot) #correlation matrix
library(leaflet) #map time
library(geojsonio)
library(rempsyc)
hurricane <- read_csv("hurricanedisplacement2005.csv")
#fix data errors and change names to their abv
hurricane<- hurricane %>%
mutate(across(where(is.numeric), ~abs(.))) %>%
mutate(
evac.state  = case_when(
str_detect(evac.state, "GEORIGA") ~ "GA",
TRUE ~ evac.state  # Keep the original value if none of the conditions are met
)) %>%
mutate(
state.most.time  = case_when(
str_detect(state.most.time, "OKLAHOMA") ~ "OK",
str_detect(state.most.time, "FLA") ~ "FL",
TRUE ~ state.most.time ))
#change to factor variables
hurricane <- hurricane %>% mutate(across(where(is.numeric), as.factor))
#make new outcome variable binary-- did leave state or did not
hurricane <- hurricane %>% mutate("didmove"= ifelse(lives.NO.still == c("2","3"), 1, 0 ))
# labels for plots
hurricane <- hurricane %>% mutate("didmove2"= ifelse(lives.NO.still == c("1"), "Moved Away", "Moved Back" ))
#fix race and work variables
hurricane <- hurricane %>%
mutate("white" = ifelse(white == c("1"), "1", "0" )) %>%
mutate("black" = ifelse(black == c("2"), "1", "0" )) %>%
mutate("hispanic" = ifelse(hispanic == c("3"), "1", "0" )) %>%
mutate("partime" = ifelse(partime == c("2"), "1", "0" )) %>%
mutate("selfempfull" = ifelse(selfempfull == c("3"), "1", "0" )) %>%
mutate("laidoff" = ifelse(laidoff == c("5"), 1, 0 )) %>%
mutate("selfemppart" = ifelse(selfemppart == c("4"), 1, 0 )) %>%
mutate("unemployed" = ifelse(unemployed == c("6"), 1, 0 )) %>%
mutate("disabled" = ifelse(disabled== c("7"), 1, 0 )) %>%
mutate("student" = ifelse(student == c("9"), 1, 0))
hurricane <- hurricane %>% mutate(across(where(is.numeric), as.character))
#summary stats and overview
datasummary_balance(~ 1, data = hurricane, caption = "summary of dataset")
#summary of did move vs moved groups
hurricanestats <- hurricane %>% select(
didmove2,
`Black` = black,
"Hispanic" = hispanic,
"White" = white,
"Level of School Completed" = schooling,
"Employed Full-Time" = fulltime,
"Employed Part-Time" = partime,
"Self Employed Full-Time" = selfempfull,
"Self Employed Part-Time" = selfemppart,
"Laid off from Job" = laidoff,
"Unemployed" = unemployed,
"Disabled" = disabled,
"Student" = student,
"Own Home" = own.rent,
"Lived in Apartment" = apartment,
"Lived in Single Family House" = singlefam,
"Lived in a Duplex" = duplex,
"Damage to Residence" = res.damage,
"Income" = income
)
caption <- "Compairison of Sociodemogrpahic and Housing/Hurricane Displacement Variables Between Moved and Moved Back Groups"
datasummary_balance(~didmove2,
data = hurricanestats,
title = caption)
#make summary of evacuation states for chloropelth map
evac.summary <- hurricane %>%
group_by(evac.state) %>%
summarise( people = n())
#change names in state variable to merge better
evac.summary <- evac.summary %>%
mutate(
evac.state  = case_when(
str_detect(evac.state, "GA") ~ "Georgia",
str_detect(evac.state, "AL") ~ "Alabama",
str_detect(evac.state, "FL") ~ "Florida",
str_detect(evac.state, "LA") ~ "Louisiana",
str_detect(evac.state, "MA") ~ "Massachusetts",
str_detect(evac.state, "MS") ~ "Mississippi",
str_detect(evac.state, "NC") ~ "North Carolina",
str_detect(evac.state, "TN") ~ "Tennessee",
str_detect(evac.state, "TX") ~ "Texas",
str_detect(evac.state, "AR") ~ "Arkansas",
TRUE ~ evac.state  # Keep the original value if none of the conditions are met
))
#map
states <- geojsonio::geojson_read("https://rstudio.github.io/leaflet/json/us-states.geojson", what = "sp")
merged_data <- merge(states, evac.summary, by.x = "name", by.y = "evac.state", x.all = TRUE)
# Create a Leaflet map
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -96, lat = 37.8, zoom = 4)  # Adjust the view as needed
#map
map <- map %>%
addPolygons(
data = merged_data,
fillColor = ~colorNumeric("YlOrRd", people)(people),
fillOpacity = 0.7,
color = "white",
weight = 1,
highlight = highlightOptions(
weight = 2,
color = "#666",
fillOpacity = 0.7,
bringToFront = TRUE
),
label = ~paste(name, "<br>", "people: ", people, sep = "")
)
# Add a legend
map <- map %>%
addLegend(
data = merged_data,
position = "bottomright",
pal = colorNumeric("YlOrRd", merged_data$people),
values = ~people,
title = "Number of People Evacuated to:",
opacity = 1
)
# Display the map
map
#plot to visualize outcome
gg <- ggplot(data = hurricane, aes(x = income, y = didmove)) +
geom_jitter(width = 0, height = 0.05, alpha = 0.8) +
labs(x = "income", y = "Moved out of NO")
gg
#filtering and fixing for model setup
hurricane <- hurricane %>% mutate_at(c("age"), as.numeric) %>% mutate_at(c("white", "hispanic", "black", "fulltime", "partime", "selfempfull", "selfemppart", "laidoff", "unemployed", "disabled","student", "apartment", "singlefam", "duplex", "own.rent"), as.character)
hurricane <- hurricane %>% filter(!is.na(didmove))
#for everything
hurricane <- hurricane %>% mutate(across((white:hispanic | fulltime:student | apartment:duplex),~replace_na(.x, "0"))) %>% mutate(didmove = as.factor(didmove))
#adding variables by catagory
#age test
hurrmodel1 <- glm(didmove ~ age, family = "binomial", data = hurricane)
#more demographics
hurrmodel2 <- glm(didmove ~ age + sex + white + black + hispanic, family = "binomial", data = hurricane)
# + job and income
hurrmodel3 <- glm(didmove ~ age + sex + pre_marriagestat + white + black + hispanic + health.before + schooling + fulltime + partime + selfempfull + selfemppart + laidoff + unemployed + disabled + student + income, family = "binomial", data = hurricane)
# + housing factors
hurrmodel4 <- glm(didmove ~ age + sex + pre_marriagestat + white + black + hispanic + health.before  + schooling + fulltime + partime + selfempfull + selfemppart + laidoff + unemployed + disabled + student + income + apartment + singlefam + duplex + own.rent, family = "binomial", data = hurricane)
# + hurricane factors
hurrmodel5 <- glm(didmove ~ age + sex + pre_marriagestat + white + black + hispanic + health.before + schooling + fulltime + partime + selfempfull + selfemppart + laidoff + unemployed + disabled + student + income + apartment + singlefam + duplex + own.rent + evac.state + res.damage, family = "binomial", data = hurricane)
# add interaction effect to test
hurrmodel6 <- glm(didmove ~ age + sex + pre_marriagestat + white + black + hispanic + health.before + schooling + fulltime + partime + selfempfull + selfemppart + laidoff + unemployed + disabled + student + income + apartment + singlefam + duplex + own.rent + evac.state + res.damage + own.rent*res.damage, family = "binomial", data = hurricane)
model_list = list(
"age only simple model" = hurrmodel1,
"adding race and demogrpahic factors" = hurrmodel2,
"adding job and income"= hurrmodel3,
"with housing factors" = hurrmodel4,
"hurricane factors"= hurrmodel5,
"with res dmg x own or rent interaction" = hurrmodel6)
modelsummary(model_list, stars = TRUE, caption = "Regression models of variables predicting move or did not move back to NO after Hurricane Katrina with Standard Errors")
# runnign again with matched sample sizes
hurricane2 <- augment(hurrmodel6)
#age test
hurrmodel1 <- glm(didmove ~ age, family = "binomial", data = hurricane)
#more demographics
hurrmodel2 <- glm(didmove ~ age + sex + pre_marriagestat + white + black + hispanic + health.before, family = "binomial", data = hurricane2)
# + job and income
hurrmodel3 <- glm(didmove ~ age + sex + pre_marriagestat + white + black + hispanic + health.before + schooling + fulltime + partime + selfempfull + selfemppart + laidoff + unemployed + disabled + student + income, family = "binomial", data = hurricane2)
# + housing factors
hurrmodel4 <- glm(didmove ~ age + sex + pre_marriagestat + white + black + hispanic + health.before  + schooling + fulltime + partime + selfempfull + selfemppart + laidoff + unemployed + disabled + student + income + apartment + singlefam + duplex + own.rent, family = "binomial", data = hurricane2)
# + hurricane factors
hurrmodel5 <- glm(didmove ~ age + sex + pre_marriagestat + white + black + hispanic + health.before + schooling + fulltime + partime + selfempfull + selfemppart + laidoff + unemployed + disabled + student + income + apartment + singlefam + duplex + own.rent + evac.state + res.damage, family = "binomial", data = hurricane)
# add interaction effect to test
hurrmodel6 <- glm(didmove ~ age + sex + pre_marriagestat + white + black + hispanic + health.before + schooling + fulltime + partime + selfempfull + selfemppart + laidoff + unemployed + disabled + student + income + apartment + singlefam + duplex + own.rent + evac.state + res.damage + own.rent*res.damage, family = "binomial", data = hurricane)
model_list = list(
"age only simple model" = hurrmodel1,
"adding race and demogrpahic factors" = hurrmodel2,
"adding job and income"= hurrmodel3,
"with housing factors" = hurrmodel4,
"hurricane factors"= hurrmodel5,
"with res dmg x own or rent interaction" = hurrmodel6)
modelsummary(model_list, stars = TRUE, caption = "Regression models of variables predicting move or did not move back to NO after Hurricane Katrina")
#model
hurrmodel7 <- glm(didmove ~ age + sex  + white + black + hispanic + income + schooling + fulltime + partime + selfempfull + selfemppart + laidoff + unemployed + disabled + student + own.rent + evac.state + res.damage + own.rent*res.damage, family = "binomial", data = hurricane)
modelsummary(("Model with interaction effect" = hurrmodel7), stars = TRUE, caption = "risk factors, controls")
#model
hurrmodel7 <- glm(didmove ~ age + sex  + white + black + hispanic + income + schooling + fulltime + partime + selfempfull + selfemppart + laidoff + unemployed + disabled + student + own.rent + evac.state + res.damage + own.rent*res.damage, family = "binomial", data = hurricane)
modelsummary(("Model with interaction effect" = hurrmodel7), stars = TRUE, caption = "risk factors, controls")
#no interaction
hurrmodel8 <- glm(didmove ~ age + sex  + white + black + hispanic + income + schooling + fulltime + partime + selfempfull + selfemppart + laidoff + unemployed + disabled + student + own.rent + evac.state + res.damage, family = "binomial", data = hurricane)
model_list = list(
" With Interaction Between owning/Renting and Residance Damage" = hurrmodel7,
"Without Interaction"= hurrmodel8           )
modelsummary(model_list, stars = TRUE, caption = "Table 3. Multivariate Logistic Regression Model Predicting Moved Away/Moved Back to NO with Standard Errors")
#no interaction
hurrmodel8 <- glm(didmove ~ age + sex  + white + black + hispanic + income + schooling + fulltime + partime + selfempfull + selfemppart + laidoff + unemployed + disabled + student + own.rent + evac.state + res.damage, family = "binomial", data = hurricane)
model_list = list(
" With Interaction Between owning/Renting and Residance Damage" = hurrmodel7,
"Without Interaction"= hurrmodel8           )
modelsummary(model_list, stars = TRUE, caption = "Table 3. Multivariate Logistic Regression Model Predicting Moved Away/Moved Back to NO with Standard Errors", output = "logisitcregressiontable.png")
webshot::install_phantomjs()
#no interaction
hurrmodel8 <- glm(didmove ~ age + sex  + white + black + hispanic + income + schooling + fulltime + partime + selfempfull + selfemppart + laidoff + unemployed + disabled + student + own.rent + evac.state + res.damage, family = "binomial", data = hurricane)
model_list = list(
" With Interaction Between owning/Renting and Residance Damage" = hurrmodel7,
"Without Interaction"= hurrmodel8           )
modelsummary(model_list, stars = TRUE, caption = "Table 3. Multivariate Logistic Regression Model Predicting Moved Away/Moved Back to NO with Standard Errors", output = "logisitcregressiontable.png")
# testing didmove and depression score
hurricane <- hurricane %>% filter(!is.na(didmove))
#calc depression score
hurricane <- hurricane %>% mutate(across(q31:q37, ~as.numeric(.x)))
x <- hurricane %>% select(q31:q36)
hurricane3 <- hurricane %>%
mutate(depressionscore = rowSums(x))
#health score
hurricane3 <- hurricane3 %>% mutate(across(health.before:health.after, ~as.numeric(.x)))
hurricane4 <- hurricane3 %>%
mutate(healthscore =(health.after - health.before))
#test for health change variable
t.test3 <- t.test( healthscore ~ didmove, data = hurricane4, na.rm = TRUE)
t.health <- nice_t_test(
data = hurricane4,
response = "healthscore",
group = "didmove",
warning = FALSE
)
health.table <- nice_table(t.health)
health.table
modelsummary(t.test3,  output = "table.tex")
new_col <- data.frame(`P Value` = c(.002, .012, .082))
confints <- data.frame(`95% CIs` = c("[-1.02 - 0.16]","[0.05 - 0.91]","[-0.49 - 0.36]"))
#new cuter table thats why cooler and i like it more i hope
datasummary((`Stress Index` = q37) + (`Depression Index` = depressionscore) + (`Health Change` = healthscore) ~ didmove2 * (mean*Arguments(na.rm=TRUE)),
data = hurricane4, caption = "T-tests Between Moved Away and Moved Back",
add_columns = (new_col, confints)
new_col <- data.frame(`P Value` = c(.002, .012, .082))
confints <- data.frame(`95% CIs` = c("[-1.02 - 0.16]","[0.05 - 0.91]","[-0.49 - 0.36]"))
#new cuter table thats why cooler and i like it more i hope
datasummary((`Stress Index` = q37) + (`Depression Index` = depressionscore) + (`Health Change` = healthscore) ~ didmove2 * (mean*Arguments(na.rm=TRUE)),
data = hurricane4,
caption = "T-tests Between Moved Away and Moved Back",
add_columns = (new_col | confints)
)
new_col <- data.frame(`P Value` = c(.002, .012, .082))
confints <- data.frame(`95% CIs` = c("[-1.02 - 0.16]","[0.05 - 0.91]","[-0.49 - 0.36]"))
#new cuter table thats why cooler and i like it more i hope
datasummary((`Stress Index` = q37) + (`Depression Index` = depressionscore) + (`Health Change` = healthscore) ~ didmove2 * (mean*Arguments(na.rm=TRUE)),
data = hurricane4,
caption = "T-tests Between Moved Away and Moved Back",
add_columns = c("new_col","confints")
)
new_col <- data.frame(`P Value` = c(.002, .012, .082))
confints <- data.frame(`95% CIs` = c("[-1.02 - 0.16]","[0.05 - 0.91]","[-0.49 - 0.36]"))
#new cuter table thats why cooler and i like it more i hope
datasummary((`Stress Index` = q37) + (`Depression Index` = depressionscore) + (`Health Change` = healthscore) ~ didmove2 * (mean*Arguments(na.rm=TRUE)),
data = hurricane4,
caption = "T-tests Between Moved Away and Moved Back",
add_columns = list(new_col,confints)
)
new_col <- data.frame(`P Value` = c(.002, .012, .082))
confints <- data.frame(`95% CIs` = c("[-1.02 - 0.16]","[0.05 - 0.91]","[-0.49 - 0.36]"))
#new cuter table thats why cooler and i like it more i hope
datasummary((`Stress Index` = q37) + (`Depression Index` = depressionscore) + (`Health Change` = healthscore) ~ didmove2 * (mean*Arguments(na.rm=TRUE)),
data = hurricane4,
caption = "T-tests Between Moved Away and Moved Back",
add_columns = list(new_col,confints)
)
new_col <- data.frame(`P Value` = c(.002, .012, .082))
confints <- data.frame(`95% CIs` = c("[-1.02 - 0.16]","[0.05 - 0.91]","[-0.49 - 0.36]"))
#new cuter table thats why cooler and i like it more i hope
datasummary((`Stress Index` = q37) + (`Depression Index` = depressionscore) + (`Health Change` = healthscore) ~ didmove2 * (mean*Arguments(na.rm=TRUE)),
data = hurricane4,
caption = "T-tests Between Moved Away and Moved Back",
add_columns = (new_col,confints)
new_col <- data.frame(`P Value` = c(.002, .012, .082))
confints <- data.frame(`95% CIs` = c("[-1.02 - 0.16]","[0.05 - 0.91]","[-0.49 - 0.36]"))
#new cuter table thats why cooler and i like it more i hope
datasummary((`Stress Index` = q37) + (`Depression Index` = depressionscore) + (`Health Change` = healthscore) ~ didmove2 * (mean*Arguments(na.rm=TRUE)),
data = hurricane4,
caption = "T-tests Between Moved Away and Moved Back",
add_columns = (new_col),
add_colums = confints
)
new_col <- data.frame(`P Value` = c(.002, .012, .082))
confints <- data.frame(`95% CIs` = c("[-1.02 - 0.16]","[0.05 - 0.91]","[-0.49 - 0.36]"))
#new cuter table thats why cooler and i like it more i hope
datasummary((`Stress Index` = q37) + (`Depression Index` = depressionscore) + (`Health Change` = healthscore) ~ didmove2 * (mean*Arguments(na.rm=TRUE)),
data = hurricane4,
caption = "T-tests Between Moved Away and Moved Back",
add_columns = (new_col ) %>%
(add_colums = confints)
new_col <- data.frame(`P Value` = c(.002, .012, .082))
confints <- data.frame(`95% CIs` = c("[-1.02 - 0.16]","[0.05 - 0.91]","[-0.49 - 0.36]"))
#new cuter table thats why cooler and i like it more i hope
datasummary((`Stress Index` = q37) + (`Depression Index` = depressionscore) + (`Health Change` = healthscore) ~ didmove2 * (mean*Arguments(na.rm=TRUE)),
data = hurricane4,
caption = "T-tests Between Moved Away and Moved Back",
add_columns = (new_col )
new_col <- data.frame(`P Value` = c(.002, .012, .082))
confints <- data.frame(`95% CIs` = c("[-1.02 - 0.16]","[0.05 - 0.91]","[-0.49 - 0.36]"))
#new cuter table thats why cooler and i like it more i hope
datasummary((`Stress Index` = q37) + (`Depression Index` = depressionscore) + (`Health Change` = healthscore) ~ didmove2 * (mean*Arguments(na.rm=TRUE)),
data = hurricane4,
caption = "T-tests Between Moved Away and Moved Back",
add_columns = (new_col ) )
new_col <- data.frame(`P Value` = c(.002, .012, .082))
confints <- data.frame(`95% CIs` = c("[-1.02 - 0.16]","[0.05 - 0.91]","[-0.49 - 0.36]"))
#new cuter table thats why cooler and i like it more i hope
datasummary((`Stress Index` = q37) + (`Depression Index` = depressionscore) + (`Health Change` = healthscore) ~ didmove2 * (mean*Arguments(na.rm=TRUE)),
data = hurricane4,
caption = "T-tests Between Moved Away and Moved Back",
add_columns = (new_col ),
digits = 3)
new_col <- data.frame(`P Value` = c(.002, .012, .082))
confints <- data.frame(`95% CIs` = c("[-1.02 - 0.16]","[0.05 - 0.91]","[-0.49 - 0.36]"))
#new cuter table thats why cooler and i like it more i hope
datasummary((`Stress Index` = q37) + (`Depression Index` = depressionscore) + (`Health Change` = healthscore) ~ didmove2 * (mean*Arguments(na.rm=TRUE)),
data = hurricane4,
caption = "T-tests Between Moved Away and Moved Back",
add_columns = (new_col ),
digits = 4)
new_col <- data.frame(`P Value` = c(.002, .012, .082))
confints <- data.frame(`95% CIs` = c("[-1.02 - 0.16]","[0.05 - 0.91]","[-0.49 - 0.36]"))
#new cuter table thats why cooler and i like it more i hope
datasummary((`Stress Index` = q37) + (`Depression Index` = depressionscore) + (`Health Change` = healthscore) ~ didmove2 * (mean*Arguments(na.rm=TRUE)),
data = hurricane4,
caption = "T-tests Between Moved Away and Moved Back",
add_columns = (new_col ),
digits = 4)
new_col <- data.frame(`P Value` = c(.002, .012, .082), `95% CIs` = c("[-1.02 - 0.16]","[0.05 - 0.91]","[-0.49 - 0.36]"))
#new cuter table thats why cooler and i like it more i hope
datasummary((`Stress Index` = q37) + (`Depression Index` = depressionscore) + (`Health Change` = healthscore) ~ didmove2 * (mean*Arguments(na.rm=TRUE)),
data = hurricane4,
caption = "T-tests Between Moved Away and Moved Back",
add_columns = (new_col ),
digits = 4)
new_col <- data.frame(`P Value` = c(.002, .012, .082), `95 Percent CIs` = c("[-1.02 - 0.16]","[0.05 - 0.91]","[-0.49 - 0.36]"))
#new cuter table thats why cooler and i like it more i hope
datasummary((`Stress Index` = q37) + (`Depression Index` = depressionscore) + (`Health Change` = healthscore) ~ didmove2 * (mean*Arguments(na.rm=TRUE)),
data = hurricane4,
caption = "T-tests Between Moved Away and Moved Back",
add_columns = (new_col ),
digits = 4)
new_col <- data.frame(`P Value` = c(.002, .012, .082), `95 Percent CIs` = c("[-1.02 - 0.16]","[0.05 - 0.91]","[-0.49 - 0.36]"))
#new cuter table thats why cooler and i like it more i hope
datasummary((`Stress Index` = q37) + (`Depression Index` = depressionscore) + (`Health Change` = healthscore) ~ didmove2 * (mean*Arguments(na.rm=TRUE)),
data = hurricane4,
caption = "T-tests Between Moved Away and Moved Back",
add_columns = (new_col ),
digits = 4,
output = "ttests.png")
install_github("wch/webshot")
library(devtools)
install_github("wch/webshot")
#map
states <- geojsonio::geojson_read("https://rstudio.github.io/leaflet/json/us-states.geojson", what = "sp")
merged_data <- merge(states, evac.summary, by.x = "name", by.y = "evac.state", x.all = TRUE)
# Create a Leaflet map
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -96, lat = 37.8, zoom = 4)  # Adjust the view as needed
#map
map <- map %>%
addPolygons(
data = merged_data,
fillColor = ~colorNumeric("YlOrRd", people)(people),
fillOpacity = 0.7,
color = "white",
weight = 1,
highlight = highlightOptions(
weight = 2,
color = "#666",
fillOpacity = 0.7,
bringToFront = TRUE
),
label = ~paste(name, "<br>", "people: ", people, sep = "")
)
# Add a legend
map <- map %>%
addLegend(
data = merged_data,
position = "bottomright",
pal = colorNumeric("YlOrRd", merged_data$people),
values = ~people,
title = "Number of People Evacuated to:",
opacity = 1
)
# Display the map
map
library(htmlwidgets)
library(webshot)
mapshot(map, file = "~/map.png")
library(mapview)
install.packages(mapview)
install.packages("mapview")
library(mapview)
mapshot(map, file = "~/map.png")
setwd("~/eds222/eds222-final-project")
mapshot(map, file = "~/map.png")
mapshot(map, file = "map.png")
